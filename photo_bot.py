import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

# –ö—Ä–æ–∫–∏ –∞–Ω–∫–µ—Ç–∏
(LANG, INSTAGRAM, AGE, WHY, OUTFIT, HELP, WISHES, PUBLIC, QUESTIONS) = range(9)

# –ó–∞–ø–∏—Ç–∞–Ω–Ω—è
questions_uk = [
    "–Ü–º'—è:",
    "–ù—ñ–∫ –≤ Instagram (–∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É):",
    "–í—ñ–∫:",
    "–ß–æ–º—É —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å —Ü—è –∑–π–æ–º–∫–∞? (–∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤, –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ —Å–µ—Ä–π–æ–∑–Ω–æ):",
    "–Ø–∫–∏–π –æ–±—Ä–∞–∑/–æ–¥—è–≥ –ø–ª–∞–Ω—É—î—à?",
    "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –≤–∏–±–æ—Ä–æ–º –æ–¥—è–≥—É/–æ–±—Ä–∞–∑—É? (—Ç–∞–∫/–Ω—ñ):",
    "–ß–∏ –º–∞—î—à –ø–æ–±–∞–∂–∞–Ω–Ω—è –¥–æ –∑–π–æ–º–∫–∏? (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: —Ö–æ—á—É –±—ñ–ª—å—à–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ñ–≤, –ª—é–±–ª—é –∑–Ω—ñ–º–∫–∏ –≤ —Ä—É—Å—ñ —Ç–æ—â–æ):",
    "–ß–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ —Ç–æ–±—ñ, —è–∫—â–æ —Ñ–æ—Ç–æ –ø–æ—Ç—Ä–∞–ø–ª—è—Ç—å —É –ø—É–±–ª—ñ—á–Ω–µ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ/Instagram? (—Ç–∞–∫/–Ω—ñ):"
]

questions_en = [
    "Name:",
    "Instagram nick (or link to your page):",
    "Age:",
    "Why are you interested in this photoshoot? (a few words, doesn't have to be serious):",
    "What look/outfit do you plan to wear?",
    "Do you need help choosing clothes/look? (yes/no):",
    "Do you have any wishes for the shoot? (e.g. I want more portraits, I like shots in motion, etc.):",
    "Are you comfortable if photos appear in public portfolio/Instagram? (yes/no):"
]

# ‚ö†Ô∏è –í–°–¢–ê–í —Å–≤—ñ–π —Ä–µ–∞–ª—å–Ω–∏–π chat_id
MY_CHAT_ID = 1165164756

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers'] = {}
    context.user_data['lang'] = None

    message = (
        "–ú–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø—ñ–ª—å–Ω–∏–π –ø—Ä–æ—î–∫—Ç ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–µ—Ä—ñ—é –∑–Ω—ñ–º–∫—ñ–≤, –∞ –ø—Ä–æ—Å—Ç—ñ—Ä, –¥–µ –ø–µ—Ä–µ—Ç–∏–Ω–∞—é—Ç—å—Å—è –Ω–∞—à—ñ –±–∞—á–µ–Ω–Ω—è. "
        "–¶–µ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—è. –ó –≤–∞–º–∏ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏. "
        "–†—ñ–∑–Ω–µ –±–∞—á–µ–Ω–Ω—è, —Ä—ñ–∑–Ω–∞ –ø–æ–¥–∞—á–∞ ‚Äî –æ–¥–Ω–∞ —ñ–¥–µ—è.\n\n"
        "üìã *–î–µ—Ç–∞–ª—ñ:* \n"
        "‚Ä¢ –ß–∞—Å –∑–π–æ–º–∫–∏: 30 —Ö–≤–∏–ª–∏–Ω\n"
        "‚Ä¢ –î–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏ (–º–æ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Ç–∞ –õ—ñ–¥–∏)\n"
        "‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å –æ–±–º–µ–∂–µ–Ω–∞\n"
        "‚Ä¢ –¶—ñ–Ω–∞: 150 Cad\n"
        "‚Ä¢ –°–µ—Ä—Ü–µ –∑–π–æ–º–∫–∏ ‚Äî —Ä–µ—Ç—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å üöó\n\n"
        "üìå *–¶–µ –ü–†–ï-–∑–∞–ø–∏—Å.* –¢–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ –º—ñ—Å—Ü–µ –º–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ, –∫–æ–ª–∏ –∑–±–µ—Ä–µ–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤!\n\n"
        "---\n\n"
        "We decided to create a shared project ‚Äî not just a series of shots, but a space where our visions intersect. "
        "This is an individual photoshoot. You‚Äôll be working with two photographers. "
        "Different visions, different approach ‚Äî one idea.\n\n"
        "üìã *Details:*\n"
        "‚Ä¢ Duration: 30 minutes\n"
        "‚Ä¢ Two photographers (my page & Lida‚Äôs)\n"
        "‚Ä¢ Limited spots available\n"
        "‚Ä¢ Price: 150 CAD\n"
        "‚Ä¢ The heart of this shoot ‚Äî a vintage car üöó\n\n"
        "*Please choose a language / –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:*\n"
        "1. –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶\n"
        "2. English üá¨üáß\n\n"
        "_–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –ª–∏—à–µ —Ü–∏—Ñ—Ä–æ—é ‚Äî 1 –∞–±–æ 2_"
    )

    await update.message.reply_text(message, parse_mode='Markdown')
    return LANG

async def lang_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == '1':
        context.user_data['lang'] = 'uk'
    elif text == '2':
        context.user_data['lang'] = 'en'
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å *1* –∞–±–æ *2* / Please choose *1* or *2*", parse_mode='Markdown')
        return LANG

    qlist = questions_uk if context.user_data['lang'] == 'uk' else questions_en
    await update.message.reply_text(qlist[0])
    return INSTAGRAM

async def instagram_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers']['name'] = update.message.text.strip()
    qlist = questions_uk if context.user_data['lang'] == 'uk' else questions_en
    await update.message.reply_text(qlist[1])
    return AGE

async def age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers']['instagram'] = update.message.text.strip()
    qlist = questions_uk if context.user_data['lang'] == 'uk' else questions_en
    await update.message.reply_text(qlist[2])
    return WHY

async def why_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers']['age'] = update.message.text.strip()
    qlist = questions_uk if context.user_data['lang'] == 'uk' else questions_en
    await update.message.reply_text(qlist[3])
    return OUTFIT

async def outfit_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers']['why'] = update.message.text.strip()
    qlist = questions_uk if context.user_data['lang'] == 'uk' else questions_en
    await update.message.reply_text(qlist[4])
    return HELP

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers']['outfit'] = update.message.text.strip()
    qlist = questions_uk if context.user_data['lang'] == 'uk' else questions_en
    await update.message.reply_text(qlist[5])
    return WISHES

async def wishes_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers']['help'] = update.message.text.strip()
    qlist = questions_uk if context.user_data['lang'] == 'uk' else questions_en
    await update.message.reply_text(qlist[6])
    return PUBLIC

async def public_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers']['wishes'] = update.message.text.strip()
    await update.message.reply_text(
        "üí° –Ø–∫—â–æ —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è ‚Äî –Ω–∞–ø–∏—à–∏ —ó—Ö —Ç—É—Ç :)\n"
        "‚úçÔ∏è If you have any questions or requests ‚Äî feel free to write them here :)"
    )
    return QUESTIONS

async def questions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers']['public'] = update.message.text.strip()
    context.user_data['answers']['questions'] = update.message.text.strip()

    answers = context.user_data['answers']
    lang = context.user_data['lang']

    response = "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏! –û—Å—å –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n\n" if lang == 'uk' else "Thank you for filling the form! Here are your answers:\n\n"
    keys_uk = ["–Ü–º'—è", "–ù—ñ–∫ Instagram", "–í—ñ–∫", "–ß–æ–º—É —Ü—ñ–∫–∞–≤–∏—Ç—å", "–û–±—Ä–∞–∑/–æ–¥—è–≥", "–î–æ–ø–æ–º–æ–≥–∞ –∑ –≤–∏–±–æ—Ä–æ–º", "–ü–æ–±–∞–∂–∞–Ω–Ω—è", "–ü—É–±–ª—ñ—á–Ω—ñ—Å—Ç—å —Ñ–æ—Ç–æ", "–ó–∞–ø–∏—Ç–∞–Ω–Ω—è"]
    keys_en = ["Name", "Instagram nick", "Age", "Why interested", "Outfit", "Help needed", "Wishes", "Photo public", "Questions"]
    keys = keys_uk if lang == 'uk' else keys_en

    for k, v in zip(keys, answers.values()):
        response += f"{k}: {v}\n"

    await update.message.reply_text(response)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–æ–±—ñ
    await context.bot.send_message(
        chat_id=MY_CHAT_ID,
        text=f"–ù–û–í–ê –ê–ù–ö–ï–¢–ê –≤—ñ–¥ @{update.message.from_user.username or '–±–µ–∑ username'}\n\n{response}"
    )

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. / Form canceled.")
    return ConversationHandler.END

def main():
    TOKEN = os.getenv('BOT_TOKEN')  # ‚úÖ –û—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä—è–¥–æ–∫!
    if not TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ! –ó–∞–¥–∞–π –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANG: [MessageHandler(filters.TEXT & ~filters.COMMAND, lang_choice)],
            INSTAGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, instagram_handler)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_handler)],
            WHY: [MessageHandler(filters.TEXT & ~filters.COMMAND, why_handler)],
            OUTFIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, outfit_handler)],
            HELP: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_handler)],
            WISHES: [MessageHandler(filters.TEXT & ~filters.COMMAND, wishes_handler)],
            PUBLIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, public_handler)],
            QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, questions_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(conv_handler)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == '__main__':
    main()
